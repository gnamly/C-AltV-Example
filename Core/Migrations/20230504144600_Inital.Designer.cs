// <auto-generated />
using System;
using Core.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shared.Models;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20230504144600_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.DBEntities.AccountContext.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AcpId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("acp_id");

                    b.Property<short>("AnimalLimit")
                        .HasColumnType("smallint")
                        .HasColumnName("animal_limit");

                    b.Property<string>("BannReason")
                        .HasColumnType("text")
                        .HasColumnName("bann_reason");

                    b.Property<bool>("Banned")
                        .HasColumnType("boolean")
                        .HasColumnName("banned");

                    b.Property<short>("CharacterLimit")
                        .HasColumnType("smallint")
                        .HasColumnName("character_limit");

                    b.Property<ZonedDateTime>("LastLogin")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_login");

                    b.Property<short>("PedLimit")
                        .HasColumnType("smallint")
                        .HasColumnName("ped_limit");

                    b.Property<decimal[]>("hardware")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("hardware");

                    b.Property<string[]>("ips")
                        .HasColumnType("text[]")
                        .HasColumnName("ips");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Core.DBEntities.AccountContext.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Appearance>("Appearance")
                        .HasColumnType("json")
                        .HasColumnName("appearance");

                    b.Property<string>("DatabasePosition")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("position");

                    b.Property<int>("Dimension")
                        .HasColumnType("integer")
                        .HasColumnName("dimension");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int?>("Health")
                        .HasColumnType("integer")
                        .HasColumnName("health");

                    b.Property<float>("Hours")
                        .HasColumnType("real")
                        .HasColumnName("hours");

                    b.Property<CharacterInfo>("Info")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("info");

                    b.Property<bool>("IsDead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dead");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("PersoId")
                        .HasColumnType("integer")
                        .HasColumnName("perso_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Behavior")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("behavior");

                    b.Property<ZonedDateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Damage")
                        .HasColumnType("json")
                        .HasColumnName("damage");

                    b.Property<string>("DatabasePosition")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("position");

                    b.Property<string>("DatabaseRotation")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("rotation");

                    b.Property<int>("Dirt")
                        .HasColumnType("integer")
                        .HasColumnName("dirt");

                    b.Property<int>("Fuel")
                        .HasColumnType("integer")
                        .HasColumnName("fuel");

                    b.Property<string>("Interior")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interior");

                    b.Property<ZonedDateTime>("LastUsed")
                        .HasColumnType("timestamptz")
                        .HasColumnName("lastUsed");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plate");

                    b.Property<Guid>("Tuning")
                        .HasColumnType("json")
                        .HasColumnName("tuning");

                    b.Property<Guid>("VehicleDataId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_data_id");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.VehicleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseMaxFuel")
                        .HasColumnType("integer")
                        .HasColumnName("base_max_fuel");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("class");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("vehicle_data");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.VehicleKey", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_id");

                    b.Property<Guid>("VehiclesId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.HasKey("CharactersId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("vehicle_keys");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.VehicleRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plate");

                    b.Property<ZonedDateTime>("RegisteredAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("registered_at");

                    b.Property<Guid>("RegisteredById")
                        .HasColumnType("uuid")
                        .HasColumnName("registered_by_id");

                    b.Property<ZonedDateTime?>("UnregisteredAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("unregistered_at");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredById");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_registrations");
                });

            modelBuilder.Entity("Core.DBEntities.AccountContext.Character", b =>
                {
                    b.HasOne("Core.DBEntities.AccountContext.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.Vehicle", b =>
                {
                    b.HasOne("Core.DBEntities.VehicleContext.VehicleData", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.VehicleKey", b =>
                {
                    b.HasOne("Core.DBEntities.AccountContext.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.VehicleContext.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.VehicleRegistration", b =>
                {
                    b.HasOne("Core.DBEntities.AccountContext.Character", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.VehicleContext.Vehicle", "Vehicle")
                        .WithMany("Registrations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredBy");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Core.DBEntities.AccountContext.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleContext.Vehicle", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
