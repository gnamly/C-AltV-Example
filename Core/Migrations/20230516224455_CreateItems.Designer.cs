// <auto-generated />
using System;
using System.Numerics;
using Core.DBContext;
using Core.DBEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shared.Models;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20230516224455_CreateItems")]
    partial class CreateItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.DBEntities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AcpId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("acp_id");

                    b.Property<short>("AnimalLimit")
                        .HasColumnType("smallint")
                        .HasColumnName("animal_limit");

                    b.Property<string>("BannReason")
                        .HasColumnType("text")
                        .HasColumnName("bann_reason");

                    b.Property<bool>("Banned")
                        .HasColumnType("boolean")
                        .HasColumnName("banned");

                    b.Property<short>("CharacterLimit")
                        .HasColumnType("smallint")
                        .HasColumnName("character_limit");

                    b.Property<ZonedDateTime>("LastLogin")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_login");

                    b.Property<short>("PedLimit")
                        .HasColumnType("smallint")
                        .HasColumnName("ped_limit");

                    b.Property<decimal[]>("hardware")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("hardware");

                    b.Property<string[]>("ips")
                        .HasColumnType("text[]")
                        .HasColumnName("ips");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Core.DBEntities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Appearance>("Appearance")
                        .HasColumnType("json")
                        .HasColumnName("appearance");

                    b.Property<string>("DatabasePosition")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("position");

                    b.Property<int>("Dimension")
                        .HasColumnType("integer")
                        .HasColumnName("dimension");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int?>("Health")
                        .HasColumnType("integer")
                        .HasColumnName("health");

                    b.Property<float>("Hours")
                        .HasColumnType("real")
                        .HasColumnName("hours");

                    b.Property<CharacterInfo>("Info")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("info");

                    b.Property<bool>("IsDead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dead");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("PersoId")
                        .HasColumnType("integer")
                        .HasColumnName("perso_id");

                    b.Property<Guid?>("ToolbarId")
                        .HasColumnType("uuid")
                        .HasColumnName("toolbar_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ToolbarId");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("Core.DBEntities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ArmorWestId")
                        .HasColumnType("bigint")
                        .HasColumnName("armor_west_id");

                    b.Property<long>("BackId")
                        .HasColumnType("bigint")
                        .HasColumnName("back_id");

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint")
                        .HasColumnName("body_id");

                    b.Property<long>("FeetId")
                        .HasColumnType("bigint")
                        .HasColumnName("feet_id");

                    b.Property<long>("HandsId")
                        .HasColumnType("bigint")
                        .HasColumnName("hands_id");

                    b.Property<long>("HatId")
                        .HasColumnType("bigint")
                        .HasColumnName("hat_id");

                    b.Property<long>("HeadExtraId")
                        .HasColumnType("bigint")
                        .HasColumnName("head_extra_id");

                    b.Property<long>("LegsId")
                        .HasColumnType("bigint")
                        .HasColumnName("legs_id");

                    b.Property<long>("MaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("mask_id");

                    b.Property<long>("NeckId")
                        .HasColumnType("bigint")
                        .HasColumnName("neck_id");

                    b.Property<long>("PhoneId")
                        .HasColumnType("bigint")
                        .HasColumnName("phone_id");

                    b.Property<long>("RadioId")
                        .HasColumnType("bigint")
                        .HasColumnName("radio_id");

                    b.Property<long>("TabletId")
                        .HasColumnType("bigint")
                        .HasColumnName("tablet_id");

                    b.Property<long>("WatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("watch_id");

                    b.HasKey("Id");

                    b.HasIndex("ArmorWestId");

                    b.HasIndex("BackId");

                    b.HasIndex("BodyId");

                    b.HasIndex("FeetId");

                    b.HasIndex("HandsId");

                    b.HasIndex("HatId");

                    b.HasIndex("HeadExtraId");

                    b.HasIndex("LegsId");

                    b.HasIndex("MaskId");

                    b.HasIndex("NeckId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("RadioId");

                    b.HasIndex("TabletId");

                    b.HasIndex("WatchId");

                    b.ToTable("equipment");
                });

            modelBuilder.Entity("Core.DBEntities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Core.DBEntities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("ContentInventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_inventory_id");

                    b.Property<string>("DatabaseWorldPosition")
                        .HasColumnType("json")
                        .HasColumnName("world_position");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<int>("ItemDataId")
                        .HasColumnType("integer")
                        .HasColumnName("item_data_id");

                    b.Property<ItemMeta>("Meta")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("meta");

                    b.HasKey("Id");

                    b.HasIndex("ContentInventoryId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemDataId");

                    b.ToTable("items");
                });

            modelBuilder.Entity("Core.DBEntities.ItemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanBeUsedInWater")
                        .HasColumnType("boolean")
                        .HasColumnName("water_use");

                    b.Property<Vector2>("Dimension")
                        .HasColumnType("json")
                        .HasColumnName("dimension");

                    b.Property<int?>("EquipmentSlot")
                        .HasColumnType("integer")
                        .HasColumnName("equipment");

                    b.Property<InventoryItemData>("InventoryData")
                        .HasColumnType("json")
                        .HasColumnName("inventory data");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int?>("ToolbarSlot")
                        .HasColumnType("integer")
                        .HasColumnName("toolbar");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("item_data");
                });

            modelBuilder.Entity("Core.DBEntities.Toolbar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long?>("GadgetOneId")
                        .HasColumnType("bigint")
                        .HasColumnName("gadget_one_id");

                    b.Property<long?>("GadgetTwoId")
                        .HasColumnType("bigint")
                        .HasColumnName("gadget_two_id");

                    b.Property<long?>("MeleeExtraId")
                        .HasColumnType("bigint")
                        .HasColumnName("melee_extra_id");

                    b.Property<long?>("MeleeId")
                        .HasColumnType("bigint")
                        .HasColumnName("melee_id");

                    b.Property<long?>("MiscOneId")
                        .HasColumnType("bigint")
                        .HasColumnName("misc_one_id");

                    b.Property<long?>("MiscTwoId")
                        .HasColumnType("bigint")
                        .HasColumnName("misc_two_id");

                    b.Property<long?>("PrimaryWeaponId")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_weapon_id");

                    b.Property<long?>("SecondaryExtraWeaponId")
                        .HasColumnType("bigint")
                        .HasColumnName("secondary_extra_weapon_id");

                    b.Property<long?>("SecondaryWeaponId")
                        .HasColumnType("bigint")
                        .HasColumnName("secondary_weapon_id");

                    b.HasKey("Id");

                    b.HasIndex("GadgetOneId");

                    b.HasIndex("GadgetTwoId");

                    b.HasIndex("MeleeExtraId");

                    b.HasIndex("MeleeId");

                    b.HasIndex("MiscOneId");

                    b.HasIndex("MiscTwoId");

                    b.HasIndex("PrimaryWeaponId");

                    b.HasIndex("SecondaryExtraWeaponId");

                    b.HasIndex("SecondaryWeaponId");

                    b.ToTable("toolbars");
                });

            modelBuilder.Entity("Core.DBEntities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<ZonedDateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<VehicleDamage>("Damage")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("damage");

                    b.Property<string>("DatabasePosition")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("position");

                    b.Property<string>("DatabaseRotation")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("rotation");

                    b.Property<byte>("Dirt")
                        .HasColumnType("smallint")
                        .HasColumnName("dirt");

                    b.Property<int>("Fuel")
                        .HasColumnType("integer")
                        .HasColumnName("fuel");

                    b.Property<string>("Interior")
                        .HasColumnType("text")
                        .HasColumnName("interior");

                    b.Property<ZonedDateTime>("LastUsed")
                        .HasColumnType("timestamptz")
                        .HasColumnName("lastUsed");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plate");

                    b.Property<VehicleTuning>("Tuning")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("tuning");

                    b.Property<int>("VehicleDataId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_data_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleDataId");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseMaxFuel")
                        .HasColumnType("integer")
                        .HasColumnName("base_max_fuel");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("class");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("vehicle_data");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleKey", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_id");

                    b.Property<Guid>("VehiclesId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.HasKey("CharactersId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("vehicle_keys");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plate");

                    b.Property<ZonedDateTime>("RegisteredAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("registered_at");

                    b.Property<Guid>("RegisteredById")
                        .HasColumnType("uuid")
                        .HasColumnName("registered_by_id");

                    b.Property<ZonedDateTime?>("UnregisteredAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("unregistered_at");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredById");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_registrations");
                });

            modelBuilder.Entity("Core.DBEntities.Character", b =>
                {
                    b.HasOne("Core.DBEntities.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Core.DBEntities.Toolbar", "Toolbar")
                        .WithMany()
                        .HasForeignKey("ToolbarId");

                    b.Navigation("Account");

                    b.Navigation("Equipment");

                    b.Navigation("Toolbar");
                });

            modelBuilder.Entity("Core.DBEntities.Equipment", b =>
                {
                    b.HasOne("Core.DBEntities.Item", "ArmorWest")
                        .WithMany()
                        .HasForeignKey("ArmorWestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Back")
                        .WithMany()
                        .HasForeignKey("BackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Feet")
                        .WithMany()
                        .HasForeignKey("FeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Hands")
                        .WithMany()
                        .HasForeignKey("HandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Hat")
                        .WithMany()
                        .HasForeignKey("HatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "HeadExtra")
                        .WithMany()
                        .HasForeignKey("HeadExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Legs")
                        .WithMany()
                        .HasForeignKey("LegsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Mask")
                        .WithMany()
                        .HasForeignKey("MaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Neck")
                        .WithMany()
                        .HasForeignKey("NeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Radio")
                        .WithMany()
                        .HasForeignKey("RadioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Tablet")
                        .WithMany()
                        .HasForeignKey("TabletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Item", "Watch")
                        .WithMany()
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorWest");

                    b.Navigation("Back");

                    b.Navigation("Body");

                    b.Navigation("Feet");

                    b.Navigation("Hands");

                    b.Navigation("Hat");

                    b.Navigation("HeadExtra");

                    b.Navigation("Legs");

                    b.Navigation("Mask");

                    b.Navigation("Neck");

                    b.Navigation("Phone");

                    b.Navigation("Radio");

                    b.Navigation("Tablet");

                    b.Navigation("Watch");
                });

            modelBuilder.Entity("Core.DBEntities.Item", b =>
                {
                    b.HasOne("Core.DBEntities.Inventory", "ContentInventory")
                        .WithMany()
                        .HasForeignKey("ContentInventoryId");

                    b.HasOne("Core.DBEntities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("Core.DBEntities.ItemData", "ItemData")
                        .WithMany()
                        .HasForeignKey("ItemDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentInventory");

                    b.Navigation("Inventory");

                    b.Navigation("ItemData");
                });

            modelBuilder.Entity("Core.DBEntities.Toolbar", b =>
                {
                    b.HasOne("Core.DBEntities.Item", "GadgetOne")
                        .WithMany()
                        .HasForeignKey("GadgetOneId");

                    b.HasOne("Core.DBEntities.Item", "GadgetTwo")
                        .WithMany()
                        .HasForeignKey("GadgetTwoId");

                    b.HasOne("Core.DBEntities.Item", "MeleeExtra")
                        .WithMany()
                        .HasForeignKey("MeleeExtraId");

                    b.HasOne("Core.DBEntities.Item", "Melee")
                        .WithMany()
                        .HasForeignKey("MeleeId");

                    b.HasOne("Core.DBEntities.Item", "MiscOne")
                        .WithMany()
                        .HasForeignKey("MiscOneId");

                    b.HasOne("Core.DBEntities.Item", "MiscTwo")
                        .WithMany()
                        .HasForeignKey("MiscTwoId");

                    b.HasOne("Core.DBEntities.Item", "PrimaryWeapon")
                        .WithMany()
                        .HasForeignKey("PrimaryWeaponId");

                    b.HasOne("Core.DBEntities.Item", "SecondaryExtraWeapon")
                        .WithMany()
                        .HasForeignKey("SecondaryExtraWeaponId");

                    b.HasOne("Core.DBEntities.Item", "SecondaryWeapon")
                        .WithMany()
                        .HasForeignKey("SecondaryWeaponId");

                    b.Navigation("GadgetOne");

                    b.Navigation("GadgetTwo");

                    b.Navigation("Melee");

                    b.Navigation("MeleeExtra");

                    b.Navigation("MiscOne");

                    b.Navigation("MiscTwo");

                    b.Navigation("PrimaryWeapon");

                    b.Navigation("SecondaryExtraWeapon");

                    b.Navigation("SecondaryWeapon");
                });

            modelBuilder.Entity("Core.DBEntities.Vehicle", b =>
                {
                    b.HasOne("Core.DBEntities.VehicleData", "VehicleData")
                        .WithMany()
                        .HasForeignKey("VehicleDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleData");
                });

            modelBuilder.Entity("Core.DBEntities.VehicleKey", b =>
                {
                    b.HasOne("Core.DBEntities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DBEntities.VehicleRegistration", b =>
                {
                    b.HasOne("Core.DBEntities.Character", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DBEntities.Vehicle", "Vehicle")
                        .WithMany("Registrations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredBy");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Core.DBEntities.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Core.DBEntities.Vehicle", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
